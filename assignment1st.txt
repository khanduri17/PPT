Ans 1.  public int[] twoSum(int[] nums, int n) {
        HashMap<Integer,Integer> map= new HashMap<>();
		int x;
		for(int i=0;i<nums.length;i++) {
			x=n-nums[i];
			if(map.containsKey(x)) {
				return new int[] {i,map.get(x)};
			}else {
				map.put(nums[i],i);
			}
		}	      
        return null;
        }
    

Ans 2. public int removeElement(int[] nums, int val) {
        int l = 0;
        int a=nums.length;

        for(int i=0;i<a;i++){
            if(nums[i]!=val){
                nums[l++]=nums[i];
                
            }
        }
       return l;
       }


Ans 3.  public int searchInsert(int[] A, int target) {
        int low = 0, high = A.length-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(A[mid] == target) return mid;
            else if(A[mid] > target) high = mid-1;
            else low = mid+1;
        }
        return low;
    }


Ans 4.  public static int[] increment() {
		int a[]=new int[] {1,2,3};
		int i=a.length-1;
		while( i >=0) {
			if(a[i]<9) {
				a[i]=a[i]+1;
				return a;
			}
			a[i]=0;
		}
		int ans[]=new int[a.length+1];
		ans[0]=0;
		
		return ans;
	}

Ans 5.     public void merge(int[] nums1, int m, int[] nums2, int n) {
         	 int size=m+n-1;
		 int i=m-1;
		 int j=n-1;
		 int x=m;
		 while(n>0) {
			 if(nums1[i]>nums2[j]) {
				 nums1[size]=nums1[i];
				 i--;
			 }else {
				 nums1[size]=nums2[j];
				 j--;
			 }
			 size--;
		 }
        
    	    }

Ans 6.  public int[] findErrorNums(int[] nums) {
        if(nums == null || nums.length == 0){
            return new int[0];
        }
        
        int[] res = new int[2];
        for(int i = 0; i < nums.length; i++){                      
            int index = Math.abs(nums[i]) - 1; 
            if(nums[index] < 0){
                res[0] = index + 1; 
            }else{
                nums[index] = -nums[index];
            }
        }
        
        for(int i = 0; i < nums.length; i++){
            if(nums[i] > 0){
                res[1] = i + 1; 
            }
        }
        
        return res;
    }
 
